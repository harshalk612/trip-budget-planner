# Ensure that input variables are not empty before accessing them
if (!is.null(input$destination) && !is.null(input$dates) && !is.null(input$budget) && !is.null(input$activities)) {
# Example: Update map with destination
output$map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
setView(lng = -74.0060, lat = 40.7128, zoom = 10) # Coordinates for New York
})
# Example: Display itinerary
output$itinerary <- renderTable({
activities <- unlist(strsplit(input$activities, ","))
data.frame(
Day = 1:length(activities),
Activity = activities
)
})
# Example: Display summary
output$summary <- renderPrint({
cat("Destination:", input$destination, "\n")
cat("Travel Dates:", input$dates[1], "to", input$dates[2], "\n")
cat("Budget:", input$budget, "\n")
cat("Activities:", input$activities, "\n")
})
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(stringdist)
# Predefined category keywords
keywords <- list(
Necessities = c("food", "eat", "rest", "lunch", "dinner", "breakfast", "sleep", "shopping"),
Leisure = c("museum", "sightseeing", "entertainment", "concert", "sports", "adventure"),
Transport = c("flight", "train", "car", "bus", "travel", "drive", "ride")
)
# Matching logic
categorize_activity <- function(activity) {
scores <- sapply(keywords, function(terms) {
min(stringdist::stringdist(activity, terms, method = "jw"))
})
category <- names(which.min(scores))
return(category)
}
# Shiny App
ui <- fluidPage(
titlePanel("Dynamic Activity Categorizer"),
sidebarLayout(
sidebarPanel(
textInput("activity", "Enter Activity:", placeholder = "e.g., lunch, museum visit, flight"),
actionButton("categorize", "Categorize Activity")
),
mainPanel(
textOutput("result")
)
)
)
server <- function(input, output, session) {
result <- eventReactive(input$categorize, {
activity <- tolower(input$activity)  # Convert to lowercase
if (activity == "") return("Please enter an activity.")
category <- categorize_activity(activity)
paste("The activity:", input$activity, "is categorized as:", category)
})
output$result <- renderText({
result()
})
}
shinyApp(ui, server)
installed.packages()
library(shiny)
library(stringdist)
# Predefined category keywords
keywords <- list(
Necessities = c("food", "eat", "rest", "lunch", "dinner", "breakfast", "sleep", "shopping"),
Leisure = c("museum", "sightseeing", "entertainment", "concert", "sports", "adventure"),
Transport = c("flight", "train", "car", "bus", "travel", "drive", "ride")
)
# Matching logic
categorize_activity <- function(activity) {
scores <- sapply(keywords, function(terms) {
min(stringdist::stringdist(activity, terms, method = "jw"))
})
category <- names(which.min(scores))
return(category)
}
# Shiny App
ui <- fluidPage(
titlePanel("Dynamic Activity Categorizer"),
sidebarLayout(
sidebarPanel(
textInput("activity", "Enter Activity:", placeholder = "e.g., lunch, museum visit, flight"),
actionButton("categorize", "Categorize Activity")
),
mainPanel(
textOutput("result")
)
)
)
server <- function(input, output, session) {
result <- eventReactive(input$categorize, {
activity <- tolower(input$activity)  # Convert to lowercase
if (activity == "") return("Please enter an activity.")
category <- categorize_activity(activity)
paste("The activity:", input$activity, "is categorized as:", category)
})
output$result <- renderText({
result()
})
}
shinyApp(ui, server)
library(shiny)
ui <- navbarPage(
"My Application",
tabPanel("Page 1",
sidebarLayout(
sidebarPanel(
h3("Sidebar Content for Page 1")
),
mainPanel(
h3("Main Content for Page 1")
)
)
),
tabPanel("Page 2",
sidebarLayout(
sidebarPanel(
h3("Sidebar Content for Page 2")
),
mainPanel(
h3("Main Content for Page 2")
)
)
)
)
server <- function(input, output) {
# Server logic can be added here
}
shinyApp(ui = ui, server = server)
ui <- navbarPage(
"My Application",
tabPanel("Page 1",
sidebarLayout(
sidebarPanel(
h3("Sidebar Content for Page 1")
),
mainPanel(
h3("Main Content for Page 1")
)
)
),
tabPanel("Page 2",
sidebarLayout(
sidebarPanel(
h3("Sidebar Content for Page 2")
),
mainPanel(
h3("Main Content for Page 2")
)
)
)
)
server <- function(input, output) {
# Server logic can be added here
}
shinyApp(ui = ui, server = server)
install.packages("languageserver")
install.packages("styler")
styler::style_file("app.R")
library(shiny)
ui <- fluidPage(
navbarPage(
"My Application",
tabPanel(
"Index Page",
fluidRow(
column(
12,
h1("Welcome to the Index Page"),
actionButton("goToPage2", "Go to Page 2")
)
)
),
tabPanel(
"Page 2",
fluidRow(
column(
12,
h1("Welcome to Page 2"),
actionButton("goToIndex", "Go to Index Page")
)
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$goToPage2, {
updateNavbarPage(session, "My Application", selected = "Page 2")
})
observeEvent(input$goToIndex, {
updateNavbarPage(session, "My Application", selected = "Index Page")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
navbarPage(
"My Application",
tabPanel(
"Index Page",
fluidRow(
column(
12,
h1("Welcome to the Index Page"),
actionButton("goToPage2", "Go to Page 2")
)
)
),
tabPanel(
"Page 2",
fluidRow(
column(
12,
h1("Welcome to Page 2"),
actionButton("goToIndex", "Go to Index Page")
)
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$goToPage2, {
updateNavbarPage(session, "My Application", selected = "Page 2")
})
observeEvent(input$goToIndex, {
updateNavbarPage(session, "My Application", selected = "Index Page")
})
}
shinyApp(ui = ui, server = server)
runApp('Final Project')
runApp('Final Project')
ui <- fluidPage(
navbarPage(
"Travel Budget Planner",
id = "mainNav",
tabPanel(
"Home",
fluidRow(
column(
12,
h1("Plan Your Trip"),
textInput(
inputId = "location",
label = "Your Location:",
placeholder = "Enter your current location (text only)"
),
textInput(
inputId = "destination",
label = "Travel Destination:",
placeholder = "Enter your travel destination (text only)"
),
dateInput(
inputId = "arrival_date",
label = "Start Date of Trip:",
format = "yyyy-mm-dd",
value = Sys.Date(),  # Default to today's date
min = Sys.Date() - 2  # Allow selection from today or two days before
),
dateInput(
inputId = "departure_date",
label = "End Date of Trip:",
format = "yyyy-mm-dd",
value = Sys.Date() + 7,  # Default to one week from today
min = Sys.Date() - 2  # Allow selection from today or two days before
),
numericInput(
inputId = "total_budget",
label = "Total Budget:",
value = 1000,
min = 1,
step = 1
),
actionButton("goToResults", "Go to Results")
)
)
),
tabPanel(
"Results",
fluidRow(
column(
12,
h1("Welcome to Results"),
actionButton("goToHome", "Go to Home")
)
)
)
)
)
runApp('Final Project')
runApp('Final Project')
library(shiny)
# UI for Expense Tracker
expense_tracker_ui <- function(id) {
ns <- NS(id)
tagList(
h4("Expense Tracker"),
numericInput(ns("food"), "Food", value = 0, min = 0),
numericInput(ns("transport"), "Transport", value = 0, min = 0),
numericInput(ns("accommodation"), "Accommodation", value = 0, min = 0),
numericInput(ns("activities"), "Activities", value = 0, min = 0)
)
}
# Server for Expense Tracker
expense_tracker_server <- function(id) {
moduleServer(id, function(input, output, session) {
total_expenses <- reactive({
input$food + input$transport + input$accommodation + input$activities
})
return(total_expenses)
})
}
# UI for Recommendations
recommendations_ui <- function(id) {
ns <- NS(id)
tagList(
h4("Recommendations"),
p("Explore local attractions and activities."),
p("Book a guided tour or enjoy cultural experiences.")
)
}
# Server for Recommendations
recommendations_server <- function(id) {
moduleServer(id, function(input, output, session) {
# Placeholder for future dynamic recommendations
})
}
# UI for Travel Insights
travel_insight_ui <- function(id) {
ns <- NS(id)
tagList(
h4("Travel Insights"),
p("Check the weather in your destination."),
p("Explore visa and entry requirements.")
)
}
# Server for Travel Insights
travel_insight_server <- function(id) {
moduleServer(id, function(input, output, session) {
# Placeholder for future dynamic insights
})
}
# UI function
ui <- fluidPage(
navbarPage(
"Travel Budget Planner",
id = "mainNav",
tabPanel(
"Home",
fluidRow(
column(
12,
h1("Plan Your Trip"),
textInput(
inputId = "location",
label = "Your Location:",
placeholder = "Enter your current location"
),
textInput(
inputId = "destination",
label = "Travel Destination:",
placeholder = "Enter your travel destination"
),
dateInput(
inputId = "arrival_date",
label = "Start Date of Trip:",
format = "dd-mm-yyyy",
value = Sys.Date(),
min = Sys.Date() - 2
),
dateInput(
inputId = "departure_date",
label = "End Date of Trip:",
format = "dd-mm-yyyy",
value = Sys.Date() + 2,
min = Sys.Date() + 1
),
numericInput(
inputId = "total_budget",
label = "Total Budget:",
value = 1000,
min = 1,
step = 1
),
actionButton("goToResults", "Go to Results")
)
)
),
tabPanel(
"Results",
fluidRow(
column(
3,
actionButton("toggle_expenses", "Show Expense Tracker"),
actionButton("toggle_recommendations", "Show Recommendations"),
actionButton("toggle_insights", "Show Travel Insights")
),
# Side panels (initially hidden)
column(9,
uiOutput("expense_tracker_ui"),
uiOutput("recommendations_ui"),
uiOutput("travel_insight_ui")
)
),
# Adding margin with an empty fluidRow
fluidRow(
column(12, br(), br())  # This will create empty space between panels and "Go to Home"
),
# Button to go to home, now placed below the side panels
fluidRow(
column(12,
actionButton("goToHome", "Go to Home")
)
)
)
)
)
# Server function
server <- function(input, output, session) {
observeEvent(input$goToResults, {
# Validate "Your Location" field
if (grepl("[0-9]", input$location)) {
showModal(
modalDialog(
title = "Validation Error",
"Your Location must not contain numbers.",
easyClose = TRUE
)
)
return()
}
# Validate "Travel Destination" field
if (grepl("[0-9]", input$destination)) {
showModal(
modalDialog(
title = "Validation Error",
"Travel Destination must not contain numbers.",
easyClose = TRUE
)
)
return()
}
# Navigate to Results page if validation passes
updateNavbarPage(session, "mainNav", selected = "Results")
})
observeEvent(input$goToHome, {
updateNavbarPage(session, "mainNav", selected = "Home")
})
# Reactive value to control which panel is visible
selected_panel <- reactiveVal(NULL)
# Update selected panel on button click
observeEvent(input$toggle_expenses, {
selected_panel("expense_tracker")
})
observeEvent(input$toggle_recommendations, {
selected_panel("recommendations")
})
observeEvent(input$toggle_insights, {
selected_panel("travel_insight")
})
# Render UI based on the selected panel
output$expense_tracker_ui <- renderUI({
req(selected_panel() == "expense_tracker")
expense_tracker_ui("expense_tracker")
})
output$recommendations_ui <- renderUI({
req(selected_panel() == "recommendations")
recommendations_ui("recommendations")
})
output$travel_insight_ui <- renderUI({
req(selected_panel() == "travel_insight")
travel_insight_ui("travel_insight")
})
# Module calls for side panels
expense_tracker_server("expense_tracker")
recommendations_server("recommendations")
travel_insight_server("travel_insight")
}
shinyApp(ui = ui, server = server)
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
runApp('Final Project')
install.packages("owmr\")
install.packages("owmr")
install.packages("owmr")
shiny::runApp('Final Project')
?owmr
owmr_settings("109d734da4f858e9dca6534a23b73e2b")
get_current("Paris", units = "metric")
runApp('Final Project')
